name: F4R2 Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'umbra/storage/**'
      - 'tests/test_*storage*'
      - 'tests/test_*r2*'
      - 'tests/test_*manifest*'
      - 'tests/test_*search*'
      - 'requirements.txt'
      - '.github/workflows/f4r2-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'umbra/storage/**'
      - 'tests/test_*storage*'
      - 'tests/test_*r2*'
      - 'tests/test_*manifest*'
      - 'tests/test_*search*'
      - 'requirements.txt'

jobs:
  test-f4r2:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run F4R2 unit tests
      run: |
        pytest tests/test_r2_client.py -v --tb=short
        pytest tests/test_object_storage.py -v --tb=short  
        pytest tests/test_manifest_manager.py -v --tb=short
        pytest tests/test_search_index.py -v --tb=short

    - name: Run F4R2 integration tests
      run: |
        pytest tests/test_f4r2_integration.py -v --tb=short

    - name: Test F4R2 imports and basic functionality
      run: |
        python -c "
        from umbra.storage import ObjectStorage, ManifestManager, SearchIndex, get_storage_info
        print('‚úÖ F4R2 imports successful')
        
        info = get_storage_info()
        print(f'F4R2 Version: {info[\"version\"]}')
        print(f'Parquet available: {info[\"parquet_available\"]}')
        
        # Test without R2 credentials (should handle gracefully)
        storage = ObjectStorage()
        print(f'Storage configured: {storage.r2_client.is_configured()}')
        print(f'Storage available: {storage.is_available()}')
        print('‚úÖ F4R2 basic functionality test passed')
        "

    - name: Run F4R2 validation script
      run: |
        python f4r2_validate.py || echo "Expected to fail without R2 credentials"

    - name: Check code coverage
      run: |
        pytest tests/test_*storage* tests/test_*r2* tests/test_*manifest* tests/test_*search* \
          --cov=umbra.storage \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: f4r2
        name: f4r2-coverage

  test-f4r2-with-r2:
    runs-on: ubuntu-latest
    # Only run this job if R2 secrets are available
    if: ${{ vars.HAS_R2_CREDENTIALS == 'true' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test F4R2 with real R2 credentials
      env:
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_BUCKET: ${{ secrets.R2_TEST_BUCKET }}
      run: |
        echo "üß™ Testing F4R2 with real R2 credentials"
        
        # Run validation
        python f4r2_validate.py
        
        # Run integration test with cleanup
        python f4r2_integration_test.py --cleanup

  lint-f4r2:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Check code formatting with Black
      run: |
        black --check umbra/storage/ tests/test_*storage* tests/test_*r2* tests/test_*manifest* tests/test_*search*

    - name: Check import sorting with isort
      run: |
        isort --check-only umbra/storage/ tests/test_*storage* tests/test_*r2* tests/test_*manifest* tests/test_*search*

    - name: Lint with flake8
      run: |
        flake8 umbra/storage/ tests/test_*storage* tests/test_*r2* tests/test_*manifest* tests/test_*search* \
          --max-line-length=88 \
          --ignore=E203,W503,E501 \
          --exclude=__pycache__

    - name: Type check with mypy
      run: |
        mypy umbra/storage/ \
          --ignore-missing-imports \
          --no-strict-optional \
          --warn-unreachable
      continue-on-error: true  # mypy can be strict, don't fail the build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security scan with bandit
      run: |
        bandit -r umbra/storage/ -f json -o bandit-report.json || true
        bandit -r umbra/storage/ -ll  # Low and medium severity

    - name: Check dependencies with safety
      run: |
        safety check --json --output safety-report.json || true
        safety check  # Show results

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run F4R2 performance tests
      run: |
        python -c "
        import time
        from umbra.storage import ObjectStorage, ManifestManager, SearchIndex
        
        print('üèÉ‚Äç‚ôÇÔ∏è F4R2 Performance Test')
        
        # Test import time
        start = time.time()
        from umbra import storage
        import_time = time.time() - start
        print(f'Import time: {import_time:.3f}s')
        
        # Test initialization time (without R2)
        start = time.time()
        obj_storage = ObjectStorage()
        manifests = ManifestManager(obj_storage)
        search = SearchIndex(obj_storage)
        init_time = time.time() - start
        print(f'Initialization time: {init_time:.3f}s')
        
        # Test in-memory operations
        start = time.time()
        for i in range(1000):
            words = search._extract_words(f'test document {i} with some sample text')
        text_processing_time = time.time() - start
        print(f'Text processing (1000 docs): {text_processing_time:.3f}s')
        
        print('‚úÖ Performance test completed')
        "

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check F4R2 documentation
      run: |
        echo "üìö Checking F4R2 documentation"
        
        # Check if key documentation files exist
        test -f "F4R2_README.md" && echo "‚úÖ F4R2_README.md exists" || echo "‚ùå F4R2_README.md missing"
        test -f "f4r2_demo.py" && echo "‚úÖ f4r2_demo.py exists" || echo "‚ùå f4r2_demo.py missing"
        test -f "f4r2_validate.py" && echo "‚úÖ f4r2_validate.py exists" || echo "‚ùå f4r2_validate.py missing"
        
        # Check if main README mentions F4R2
        if grep -q "F4R2" README.md; then
          echo "‚úÖ Main README mentions F4R2"
        else
          echo "‚ùå Main README should mention F4R2"
          exit 1
        fi
        
        # Check if all public functions have docstrings
        python -c "
        import inspect
        from umbra.storage import ObjectStorage, ManifestManager, SearchIndex
        
        classes_to_check = [ObjectStorage, ManifestManager, SearchIndex]
        missing_docs = []
        
        for cls in classes_to_check:
            for name, method in inspect.getmembers(cls, predicate=inspect.ismethod):
                if not name.startswith('_') and not method.__doc__:
                    missing_docs.append(f'{cls.__name__}.{name}')
        
        if missing_docs:
            print('‚ùå Missing docstrings:')
            for item in missing_docs:
                print(f'  - {item}')
            exit(1)
        else:
            print('‚úÖ All public methods have docstrings')
        "

  build-summary:
    runs-on: ubuntu-latest
    needs: [test-f4r2, lint-f4r2, security-scan, performance-test, documentation]
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "üéØ F4R2 Test Suite Summary"
        echo "=========================="
        echo ""
        echo "Test Results:"
        echo "- Unit Tests: ${{ needs.test-f4r2.result }}"
        echo "- Code Quality: ${{ needs.lint-f4r2.result }}"  
        echo "- Security Scan: ${{ needs.security-scan.result }}"
        echo "- Performance: ${{ needs.performance-test.result }}"
        echo "- Documentation: ${{ needs.documentation.result }}"
        echo ""
        
        if [[ "${{ needs.test-f4r2.result }}" == "success" && 
              "${{ needs.lint-f4r2.result }}" == "success" && 
              "${{ needs.documentation.result }}" == "success" ]]; then
          echo "üéâ F4R2 is ready for deployment!"
        else
          echo "‚ùå Some F4R2 tests failed - check the logs"
          exit 1
        fi
