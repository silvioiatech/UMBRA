# Creator v1 (CRT4) - Kubernetes Deployment
# Complete production-ready Kubernetes manifests
apiVersion: v1
kind: Namespace
metadata:
  name: creator-v1
  labels:
    app.kubernetes.io/name: creator-v1
    app.kubernetes.io/version: "1.0.0"
---
# ConfigMap for Creator v1 configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: creator-config
  namespace: creator-v1
data:
  creator-config.yaml: |
    creator:
      v1:
        enabled: true
        debug: false
        log_level: INFO
      
      providers:
        openai:
          model: gpt-4
          enabled: true
          timeout_seconds: 60
        
        anthropic:
          model: claude-3-opus-20240229
          enabled: false
      
      performance:
        cache:
          enabled: true
          ttl_seconds: 3600
          max_memory_mb: 512
        
        rate_limiting:
          enabled: true
          requests_per_minute: 100
          strict_mode: true
        
        batching:
          enabled: true
          max_batch_size: 20
          max_wait_time_ms: 5000
      
      security:
        enabled: true
        session_timeout_hours: 8
        max_login_attempts: 5
        encryption_enabled: true
      
      monitoring:
        analytics_enabled: true
        health_monitoring_enabled: true
        metrics_export_enabled: true
        prometheus_enabled: true
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: creator-secrets
  namespace: creator-v1
type: Opaque
data:
  # Base64 encoded values - update these with your actual secrets
  openai-api-key: eW91cl9vcGVuYWlfYXBpX2tleV9oZXJl  # your_openai_api_key_here
  anthropic-api-key: eW91cl9hbnRocm9waWNfYXBpX2tleV9oZXJl  # your_anthropic_api_key_here
  jwt-secret: eW91cl9qd3Rfc2VjcmV0X2hlcmU=  # your_jwt_secret_here
  encryption-password: eW91cl9lbmNyeXB0aW9uX3Bhc3N3b3JkX2hlcmU=  # your_encryption_password_here
  db-password: eW91cl9kYl9wYXNzd29yZF9oZXJl  # your_db_password_here
  redis-password: eW91cl9yZWRpc19wYXNzd29yZF9oZXJl  # your_redis_password_here
---
# PostgreSQL Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: creator-v1
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: creator
        - name: POSTGRES_USER
          value: creator
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: db-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - creator
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - creator
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
      storageClassName: fast-ssd
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: creator-v1
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None
---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: creator-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 512mb
        - --maxmemory-policy
        - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: redis-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: creator-v1
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
# Creator v1 Main Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: creator-app
  namespace: creator-v1
  labels:
    app: creator-app
    version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: creator-app
  template:
    metadata:
      labels:
        app: creator-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres -U creator; do
            echo "Waiting for database..."
            sleep 2
          done
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
      containers:
      - name: creator-app
        image: creator-v1:1.0.0
        ports:
        - name: dashboard
          containerPort: 8080
        - name: api
          containerPort: 8000
        env:
        # Core Settings
        - name: CREATOR_V1_ENABLED
          value: "true"
        - name: CREATOR_LOG_LEVEL
          value: "INFO"
        
        # Database
        - name: CREATOR_DATABASE_URL
          value: "postgresql://creator:$(DB_PASSWORD)@postgres:5432/creator"
        
        # Redis
        - name: CREATOR_CACHE_REDIS_ENABLED
          value: "true"
        - name: CREATOR_CACHE_REDIS_HOST
          value: "redis"
        - name: CREATOR_CACHE_REDIS_PORT
          value: "6379"
        - name: CREATOR_CACHE_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: redis-password
        
        # AI Providers
        - name: CREATOR_OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: openai-api-key
        - name: CREATOR_ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: anthropic-api-key
        
        # Security
        - name: CREATOR_SECURITY_ENABLED
          value: "true"
        - name: CREATOR_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: jwt-secret
        - name: CREATOR_ENCRYPTION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: encryption-password
        
        # Performance
        - name: CREATOR_RATE_LIMITING_ENABLED
          value: "true"
        - name: CREATOR_BATCHING_ENABLED
          value: "true"
        - name: CREATOR_HEALTH_MONITORING_ENABLED
          value: "true"
        
        # Database password for connection string
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: db-password
        
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 15"
      
      volumes:
      - name: config-volume
        configMap:
          name: creator-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: creator-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: creator-logs-pvc
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - creator-app
              topologyKey: kubernetes.io/hostname
---
# Data Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: creator-data-pvc
  namespace: creator-v1
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
# Logs Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: creator-logs-pvc
  namespace: creator-v1
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
# Creator App Service
apiVersion: v1
kind: Service
metadata:
  name: creator-app-service
  namespace: creator-v1
  labels:
    app: creator-app
spec:
  selector:
    app: creator-app
  ports:
  - name: dashboard
    port: 8080
    targetPort: 8080
  - name: api
    port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: creator-v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: celery-worker
        image: creator-v1:1.0.0
        command:
        - celery
        - -A
        - umbra.modules.creator.tasks
        - worker
        - --loglevel=info
        - --concurrency=4
        env:
        - name: CREATOR_V1_ENABLED
          value: "true"
        - name: CREATOR_CELERY_BROKER_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/1"
        - name: CREATOR_CELERY_RESULT_BACKEND
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/2"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: redis-password
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: creator-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: creator-logs-pvc
---
# Celery Beat Scheduler
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: creator-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: celery-beat
        image: creator-v1:1.0.0
        command:
        - celery
        - -A
        - umbra.modules.creator.tasks
        - beat
        - --loglevel=info
        env:
        - name: CREATOR_V1_ENABLED
          value: "true"
        - name: CREATOR_CELERY_BROKER_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/1"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: creator-secrets
              key: redis-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: creator-data-pvc
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: creator-ingress
  namespace: creator-v1
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - creator.yourdomain.com
    - api.creator.yourdomain.com
    secretName: creator-tls
  rules:
  - host: creator.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: creator-app-service
            port:
              number: 8080
  - host: api.creator.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: creator-app-service
            port:
              number: 8000
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: creator-app-hpa
  namespace: creator-v1
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: creator-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: creator-app-pdb
  namespace: creator-v1
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: creator-app
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: creator-network-policy
  namespace: creator-v1
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: creator-app
    - podSelector:
        matchLabels:
          app: celery-worker
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external APIs
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: creator-app-metrics
  namespace: creator-v1
  labels:
    app: creator-app
spec:
  selector:
    matchLabels:
      app: creator-app
  endpoints:
  - port: dashboard
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: creator-alerts
  namespace: creator-v1
spec:
  groups:
  - name: creator.rules
    rules:
    - alert: CreatorAppDown
      expr: up{job="creator-app-service"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Creator App is down"
        description: "Creator App has been down for more than 1 minute"
    
    - alert: CreatorHighErrorRate
      expr: rate(creator_requests_failed_total[5m]) / rate(creator_requests_total[5m]) > 0.1
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "High error rate in Creator App"
        description: "Error rate is {{ $value | humanizePercentage }} for more than 2 minutes"
    
    - alert: CreatorHighLatency
      expr: histogram_quantile(0.95, rate(creator_request_duration_seconds_bucket[5m])) > 5
      for: 3m
      labels:
        severity: warning
      annotations:
        summary: "High latency in Creator App"
        description: "95th percentile latency is {{ $value }}s for more than 3 minutes"
    
    - alert: CreatorDatabaseDown
      expr: up{job="postgres"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Creator Database is down"
        description: "PostgreSQL database has been down for more than 1 minute"
    
    - alert: CreatorRedisDown
      expr: up{job="redis"} == 0
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "Creator Redis is down"
        description: "Redis cache has been down for more than 1 minute"
