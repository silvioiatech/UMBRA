# Creator v1 (CRT4) - Docker Compose Configuration
# Complete deployment stack with all services and dependencies
version: '3.8'

services:
  # Main Creator v1 Application
  creator-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: production
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    image: creator-v1:${VERSION:-latest}
    container_name: creator-app
    hostname: creator-app
    restart: unless-stopped
    ports:
      - "${CREATOR_APP_PORT:-8080}:8080"
      - "${CREATOR_API_PORT:-8000}:8000"
    environment:
      # Core Creator Settings
      CREATOR_V1_ENABLED: "true"
      CREATOR_V1_DEBUG: "${DEBUG:-false}"
      CREATOR_LOG_LEVEL: "${LOG_LEVEL:-INFO}"
      
      # AI Provider Settings
      CREATOR_OPENAI_API_KEY: "${OPENAI_API_KEY}"
      CREATOR_ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      CREATOR_STABILITY_API_KEY: "${STABILITY_API_KEY}"
      
      # Database Settings
      CREATOR_DATABASE_URL: "postgresql://creator:${DB_PASSWORD}@postgres:5432/creator"
      
      # Redis Settings
      CREATOR_CACHE_REDIS_ENABLED: "true"
      CREATOR_CACHE_REDIS_HOST: "redis"
      CREATOR_CACHE_REDIS_PORT: "6379"
      CREATOR_CACHE_REDIS_PASSWORD: "${REDIS_PASSWORD}"
      
      # Security Settings
      CREATOR_SECURITY_ENABLED: "true"
      CREATOR_JWT_SECRET: "${JWT_SECRET}"
      CREATOR_ENCRYPTION_PASSWORD: "${ENCRYPTION_PASSWORD}"
      
      # Performance Settings
      CREATOR_RATE_LIMITING_ENABLED: "true"
      CREATOR_BATCHING_ENABLED: "true"
      CREATOR_HEALTH_MONITORING_ENABLED: "true"
      
      # Monitoring Settings
      CREATOR_ANALYTICS_ENABLED: "true"
      CREATOR_METRICS_EXPORT_ENABLED: "true"
      
      # External Service URLs
      PROMETHEUS_URL: "http://prometheus:9090"
      GRAFANA_URL: "http://grafana:3000"
      
    volumes:
      - creator-data:/app/data
      - creator-logs:/app/logs
      - creator-cache:/app/cache
      - creator-config:/app/config
      - ./config:/app/config/external:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - creator-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: creator-postgres
    hostname: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: creator
      POSTGRES_USER: creator
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - creator-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U creator -d creator"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: creator-redis
    hostname: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - creator-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: creator-nginx
    hostname: nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - creator-app
    networks:
      - creator-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: creator-prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - creator-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: creator-grafana
    hostname: grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD}"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - creator-network

  # Log Management
  
  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: creator-elasticsearch
    hostname: elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=creator-logs
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - creator-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1G

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: creator-kibana
    hostname: kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    networks:
      - creator-network

  # Background Jobs
  
  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: creator-v1:${VERSION:-latest}
    container_name: creator-celery-worker
    hostname: celery-worker
    restart: unless-stopped
    command: celery -A umbra.modules.creator.tasks worker --loglevel=info --concurrency=4
    environment:
      CREATOR_V1_ENABLED: "true"
      CREATOR_CELERY_BROKER_URL: "redis://:${REDIS_PASSWORD}@redis:6379/1"
      CREATOR_CELERY_RESULT_BACKEND: "redis://:${REDIS_PASSWORD}@redis:6379/2"
    volumes:
      - creator-data:/app/data
      - creator-logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - creator-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    image: creator-v1:${VERSION:-latest}
    container_name: creator-celery-beat
    hostname: celery-beat
    restart: unless-stopped
    command: celery -A umbra.modules.creator.tasks beat --loglevel=info
    environment:
      CREATOR_V1_ENABLED: "true"
      CREATOR_CELERY_BROKER_URL: "redis://:${REDIS_PASSWORD}@redis:6379/1"
    volumes:
      - creator-data:/app/data
      - creator-logs:/app/logs
    depends_on:
      - redis
    networks:
      - creator-network

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    image: creator-v1:${VERSION:-latest}
    container_name: creator-flower
    hostname: flower
    restart: unless-stopped
    command: celery -A umbra.modules.creator.tasks flower --port=5555
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      CREATOR_CELERY_BROKER_URL: "redis://:${REDIS_PASSWORD}@redis:6379/1"
    depends_on:
      - redis
    networks:
      - creator-network

  # Development Tools (comment out in production)
  
  # PgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: creator-pgadmin
    hostname: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_EMAIL:-admin@creator.local}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD}"
    ports:
      - "${PGADMIN_PORT:-8081}:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - creator-network
    profiles:
      - dev

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: creator-redis-commander
    hostname: redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:1:${REDIS_PASSWORD}"
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    depends_on:
      - redis
    networks:
      - creator-network
    profiles:
      - dev

# Volumes
volumes:
  creator-data:
    driver: local
  creator-logs:
    driver: local
  creator-cache:
    driver: local
  creator-config:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  pgadmin-data:
    driver: local

# Networks
networks:
  creator-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Secrets (for production use)
secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  redis_password:
    file: ./secrets/redis_password.txt
